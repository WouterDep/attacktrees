package model.templates;

import controller.IDPParser;
import model.AttackTree;
import model.AttackTreeNode;
import model.Complexity;
import model.Countermeasure;
import model.Descriptions;
import model.Operation;

/**
 * ExploitRemoteCodeExecutionVulnerability(Module) template
 * @author Wouter
 *
 */
public class ExploitRCE {

	private IDPParser parser;
	private String module;
	private AttackTreeNode node;
	private AttackTree attackTree;
	
	public ExploitRCE(IDPParser parser, String module, AttackTreeNode node, AttackTree attackTree) {
		this.parser = parser;
		this.module = module;
		this.node = node;
		this.attackTree = attackTree;
	}
	
	public void exploitRCE(){
		// root of this template has operation OR
				node.setOperation(Operation.OR);
				attackTree.addCountermeasureToNode(new Countermeasure("Restrict outbound traffic",
						Descriptions.countermeasures.get("Restrict outbound traffic"),Complexity.HIGH,2), node);
				// check if systemPart has code execution vuln
				boolean rceVuln = false;
				if(parser.getHasCodeExecutionVuln()!= null)
					for(String s : parser.getHasCodeExecutionVuln()){
						if(s.equals(module)) rceVuln = true;
					}
				
				// vulnerability children
				if (rceVuln){
					AttackTreeNode exploit = new AttackTreeNode("Exploit known remote code execution vulnerability in module " + module);
					attackTree.addCountermeasureToNode(new Countermeasure("Install updates/patches",
							Descriptions.countermeasures.get("Install updates/patches"),Complexity.HIGH,3), exploit);
					exploit.setStealth(2);
					node.addChild(exploit);
					attackTree.addNode(exploit);
				}
				
				AttackTreeNode discover = new AttackTreeNode("DiscoverRCEVuln(" + module + ")");
				node.addChild(discover);
				attackTree.addNode(discover);
				DiscoverRCE discoverTemp = new DiscoverRCE(module, discover, attackTree);
				discoverTemp.discoverRCE();
	}
}
