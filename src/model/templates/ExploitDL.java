package model.templates;

import controller.IDPParser;
import model.AttackTree;
import model.AttackTreeNode;
import model.Complexity;
import model.Countermeasure;
import model.Descriptions;
import model.Operation;

/**
 *  ExploitDLVuln(SystemPart) template
 * @author Wouter
 *
 */
public class ExploitDL {

	private IDPParser parser;
	private String component;
	private AttackTreeNode node;
	private AttackTree attackTree;
	
	public ExploitDL(IDPParser parser, String component, AttackTreeNode node, AttackTree attackTree) {
		this.parser = parser;
		this.component = component;
		this.node = node;
		this.attackTree = attackTree;
	}
	
	public void exploitDL(){
		// root of this template has operation OR
		node.setOperation(Operation.OR);
		attackTree.addCountermeasureToNode(new Countermeasure("Restrict outbound traffic",
				Descriptions.countermeasures.get("Restrict outbound traffic"),Complexity.HIGH,2), node);
		// check if systemPart has data leakage vuln
		boolean DLVuln = false;
		if(parser.getHasDataLeakageVuln()!= null)
			for(String s : parser.getHasDataLeakageVuln()){
				if(s.equals(component)) DLVuln = true;
			}
		
		// vulnerability children
		if (DLVuln){
			AttackTreeNode exploit = new AttackTreeNode("Exploit known data leakage vulnerability in component " + component);
			attackTree.addCountermeasureToNode(new Countermeasure("Install updates/patches",
					Descriptions.countermeasures.get("Install updates/patches"),Complexity.HIGH,3), exploit);
			exploit.setStealth(2);
			node.addChild(exploit);
			attackTree.addNode(exploit);
		}
		else{			

		}

		AttackTreeNode discover = new AttackTreeNode("DiscoverDLVuln(" + component + ")");
		node.addChild(discover);
		attackTree.addNode(discover);
		DiscoverDL temp = new DiscoverDL(component, discover, attackTree);
		temp.discoverDL();
	}
	
	
}
