package model.templates;

import controller.IDPParser;
import model.AttackTree;
import model.AttackTreeNode;
import model.Complexity;
import model.Countermeasure;
import model.Descriptions;
import model.Operation;

/**
 *  ExploitPEVuln(SystemPart) template
 * @author Wouter
 *
 */
public class ExploitPE {

	private IDPParser parser;
	private String module;
	private AttackTreeNode node;
	private AttackTree attackTree;
	
	public ExploitPE(IDPParser parser, String module, AttackTreeNode node, AttackTree attackTree) {
		this.parser = parser;
		this.module = module;
		this.node = node;
		this.attackTree = attackTree;
	}
	
	public void exploitPE(){
			// root of this template has operation OR
			node.setOperation(Operation.OR);
			attackTree.addCountermeasureToNode(new Countermeasure("Restrict outbound traffic",
					Descriptions.countermeasures.get("Restrict outbound traffic"),Complexity.HIGH,2), node);
			// check if systemPart has code execution vuln
			boolean PEVuln = false;
			if(parser.getHasWrongPrivilegesVuln()!= null)
				for(String s : parser.getHasWrongPrivilegesVuln()){
					if(s.equals(module)) PEVuln = true;
				}
			
			// vulnerability children
			if (PEVuln){
				AttackTreeNode exploit = new AttackTreeNode("Exploit known privilege escalation vulnerability in module " + module);
				attackTree.addCountermeasureToNode(new Countermeasure("Install updates/patches",
						Descriptions.countermeasures.get("Install updates/patches"),Complexity.HIGH,3), exploit);
				exploit.setStealth(2);
				node.addChild(exploit);
				attackTree.addNode(exploit);
			}
			else{			

			}

			AttackTreeNode discover = new AttackTreeNode("DiscoverPEVuln(" + module + ")");
			node.addChild(discover);
			attackTree.addNode(discover);
			DiscoverPE discoverTemp = new DiscoverPE(module, discover, attackTree);
			discoverTemp.discoverPE();
		}
}

